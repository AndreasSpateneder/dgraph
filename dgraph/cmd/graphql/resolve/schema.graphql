# Test schema that contains an example of everything that's useful to
# test for query rewriting.

type Country {
        id: ID!
        name: String! @search(by: "trigram") @dgraph(edge: "Country.name")
}

type Author {
        id: ID!
        name: String! @search(by: "hash") @dgraph(edge: "Author.name")
        dob: DateTime @search @dgraph(edge: "Author.dob")
        reputation: Float @search @dgraph(edge: "Author.reputation")
        country: Country @dgraph(edge: "Author.country")
        posts: [Post!] @hasInverse(field: "author") @dgraph(edge: "Author.posts")
}

type Post {
        postID: ID!
        title: String! @search(by: "term") @dgraph(edge: "Post.title")
        text: String @search(by: "fulltext") @dgraph(edge: "Post.text")
        tags: [String] @search(by: "exact") @dgraph(edge: "Post.tags")
        numLikes: Int @search @dgraph(edge: "Post.numLikes")
        isPublished: Boolean @dgraph(edge: "Post.isPublished")
        postType: PostType @search @dgraph(edge: "Post.postType")
        author: Author! @hasInverse(field: "posts") @dgraph(edge: "Post.author")
}

enum PostType {
        Fact
        Question
        Opinion
}

interface Character {
        id: ID!
        name: String! @search @dgraph(edge: "Character.name")
}

interface Employee {
        ename: String! @dgraph(edge: "Employee.ename")
}

type Director implements Character {
        movies: [String!] @dgraph(edge: "Director.movies")
}

type Human implements Character & Employee {
        dob: DateTime @dgraph(edge: "Human.dob")
        female: Boolean @dgraph(edge: "Human.female")
}
